@page "/user-data-example"
@rendermode InteractiveServer
@inject AuthService AuthService
@using Web.Services

<div class="container">
    <h3>User Data Example</h3>
    <p>This page shows how to use the AuthService to make authenticated API calls.</p>

    @if (isLoading)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (userData != null)
    {
        <div class="card">
            <div class="card-header">User Information</div>
            <div class="card-body">
                <p><strong>ID:</strong> @userData.Id</p>
                <p><strong>Username:</strong> @userData.UserName</p>
                <p><strong>Email:</strong> @userData.Email</p>
                <p><strong>Role:</strong> @userData.Role</p>
            </div>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">
            @errorMessage
        </div>
    }

    <div class="mt-3">
        <button @onclick="LoadUserData" class="btn btn-primary me-2" disabled="@isLoading">
            Refresh Data
        </button>
        <button @onclick="Logout" class="btn btn-secondary">
            Logout
        </button>
    </div>
</div>

@code {
    private UserDataDto? userData;
    private bool isLoading = true;
    private string errorMessage = string.Empty;

    private string userId = "current-user-id"; // Replace with actual user ID retrieval logic

    protected override async Task OnInitializedAsync()
    {
        await LoadUserData();
    }

    private async Task LoadUserData()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            // TODO: Get current user data from User API Service
            userData = new UserDataDto
            {
                Id = userId,
                UserName = "exampleuser",
                Email = "exampleuser@example.com",
                Role = "User"
            };

            if (userData == null)
            {
                errorMessage = "Failed to load user data.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading user data: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task Logout()
    {
        await AuthService.LogoutAsync();
    }

    // Example DTO - you can replace this with your actual DTO
    public class UserDataDto
    {
        public string Id { get; set; } = string.Empty;
        public string UserName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Role { get; set; } = string.Empty;
    }
}
