@page "/products"
@using Web.Services.Products.DTOs
@using Web.Services.Products
@using Web.Services.Cart.DTOs
@using Web.Services.Cart
@using Microsoft.AspNetCore.Components.Authorization
@inject ProductService ProductService
@inject CartService CartService
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer
@attribute [AllowAnonymous]

<div class="dashboard-container">
    <aside class="sidebar">
        <NavMenu />
    </aside>
    <main class="main-content">
        <header class="topbar">
            <div class="brand">
                <span class="dot"></span>
                <span>Product Catalog</span>
            </div>
            <div class="topbar-actions">
                <input class="search" placeholder="Search productsâ€¦" />
                <div class="avatar" title="Account"></div>
            </div>
        </header>
        <div class="content-wrapper">
            <section class="greeting">
                <h1>Product Catalog</h1>
                <p>Discover our amazing products</p>
            </section>
            
            @if (isLoading)
            {
                <div class="loading">
                    <p>Loading products...</p>
                </div>
            }
            else
            {
                <section class="products-grid">
                    @foreach (var product in products)
                    {
                        <div class="product-card">
                            <div class="product-image">
                                <img src="@product.ImageUrl" alt="@product.Name" />
                            </div>
                            <div class="product-info">
                                <h3 class="product-name">@product.Name</h3>
                                <p class="product-description">@product.Description</p>
                                <div class="product-price">
                                    <span class="price">@product.Price.ToString("C")</span>
                                    <span class="currency">@product.Currency</span>
                                </div>
                                <button class="btn btn-primary add-to-cart-btn" 
                                        @onclick="() => AddToCart(product)"
                                        disabled="@isAddingToCart">
                                    @if (isAddingToCart)
                                    {
                                        <span>Adding...</span>
                                    }
                                    else
                                    {
                                        <span>Add to Cart</span>
                                    }
                                </button>
                            </div>
                        </div>
                    }
                </section>
            }
        </div>
    </main>
</div>

@code {
    private List<ProductDto> products = new();
    private bool isLoading = true;
    private bool isAddingToCart = false;
    private string userId = string.Empty;
    private string sessionId = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Get user info from authentication state
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            userId = authState.User.FindFirst("sub")?.Value ?? string.Empty;
        }
        
        // Generate or get session ID
        sessionId = Guid.NewGuid().ToString();
        
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        isLoading = true;
        try
        {
            products = await ProductService.GetProductsAsync() ?? new List<ProductDto>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading products: {ex.Message}");
            products = new List<ProductDto>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task AddToCart(ProductDto product)
    {
        isAddingToCart = true;
        try
        {
            var input = new AddToCartInput
            {
                UserId = userId,
                SessionId = sessionId,
                Item = new CartItemInput
                {
                    ProductId = product.Id,
                    ProductName = product.Name,
                    Quantity = 1,
                    Price = product.Price,
                    Currency = product.Currency
                }
            };
            
            var result = await CartService.AddToCartAsync(input);
            if (result != null)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"{product.Name} added to cart!");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Failed to add product to cart");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error adding product to cart: {ex.Message}");
        }
        finally
        {
            isAddingToCart = false;
        }
    }
}
