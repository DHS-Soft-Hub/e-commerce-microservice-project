@page "/register"
@rendermode InteractiveServer
@inject AuthService AuthService
@inject NavigationManager Navigation

<div class="register-container">
    <div class="register-card">
        <div class="register-header">
            <h2 class="register-title">Create Account</h2>
            <p class="register-subtitle">Join us today and get started</p>
        </div>

        @if (!string.IsNullOrEmpty(Message))
        {
            <div class="alert @(Message.Contains("Successful") ? "alert-success" : "alert-danger")">
                <i class="fas @(Message.Contains("Successful") ? "fa-check-circle" : "fa-exclamation-triangle")"></i>
                @Message
            </div>
        }

        <form class="register-form" @onsubmit="HandleRegister" @onsubmit:preventDefault="true">
            <div class="form-group">
                <label class="form-label">
                    <i class="fas fa-user"></i>
                    Username
                </label>
                <input type="text" 
                       class="form-control" 
                       placeholder="Choose a username"
                       @bind="registerModel.Username"
                       required />
            </div>

            <div class="form-group">
                <label class="form-label">
                    <i class="fas fa-envelope"></i>
                    Email Address
                </label>
                <input type="email" 
                       class="form-control" 
                       placeholder="Enter your email address"
                       @bind="registerModel.Email"
                       required />
            </div>

            <div class="form-group">
                <label class="form-label">
                    <i class="fas fa-lock"></i>
                    Password
                </label>
                <div class="password-input-container">
                    <input type="@(showPassword ? "text" : "password")" 
                           class="form-control" 
                           placeholder="Create a secure password"
                           @bind="registerModel.Password"
                           required />
                    <button type="button" 
                            class="password-toggle" 
                            @onclick="TogglePasswordVisibility">
                        <i class="fas @(showPassword ? "fa-eye-slash" : "fa-eye")"></i>
                    </button>
                </div>
                <small class="password-hint">Password should be at least 6 characters long</small>
            </div>

            <div class="form-group">
                <label class="form-label">
                    <i class="fas fa-lock"></i>
                    Confirm Password
                </label>
                <input type="@(showConfirmPassword ? "text" : "password")" 
                       class="form-control @(passwordsMatch ? "" : "error")" 
                       placeholder="Confirm your password"
                       @bind="confirmPassword"
                       @oninput="CheckPasswordMatch"
                       required />
                @if (!passwordsMatch && !string.IsNullOrEmpty(confirmPassword))
                {
                    <span class="error-text">Passwords do not match</span>
                }
            </div>

            <div class="form-options">
                <label class="terms-check">
                    <input type="checkbox" @bind="agreeToTerms" required>
                    <span class="checkmark"></span>
                    I agree to the <a href="/terms" class="terms-link">Terms of Service</a> and <a href="/privacy" class="terms-link">Privacy Policy</a>
                </label>
            </div>

            <button type="submit" 
                    class="btn btn-primary" 
                    disabled="@(!IsFormValid() || isSubmitting)">
                @if (isSubmitting)
                {
                    <i class="fas fa-spinner fa-spin"></i>
                    <span>Creating Account...</span>
                }
                else
                {
                    <i class="fas fa-user-plus"></i>
                    <span>Create Account</span>
                }
            </button>
        </form>

        <div class="register-divider">
            <span>or</span>
        </div>

        <div class="social-register">
            <button type="button" class="btn btn-social btn-google">
                <i class="fab fa-google"></i>
                <span>Sign up with Google</span>
            </button>
            <button type="button" class="btn btn-social btn-microsoft">
                <i class="fab fa-microsoft"></i>
                <span>Sign up with Microsoft</span>
            </button>
        </div>

        <div class="login-prompt">
            <p>Already have an account? <a href="/login" class="login-link">Sign in here</a></p>
        </div>
    </div>

    <div class="register-footer">
        <p>&copy; 2025 Your Company. All rights reserved.</p>
        <div class="footer-links">
            <a href="/help">Help</a>
            <a href="/terms">Terms</a>
            <a href="/privacy">Privacy</a>
            <a href="/contact">Contact</a>
        </div>
    </div>
</div>

@code {
    private RegisterModel registerModel = new RegisterModel();
    private string confirmPassword = "";
    private string Message = "";
    private bool showPassword = false;
    private bool showConfirmPassword = false;
    private bool agreeToTerms = false;
    private bool isSubmitting = false;
    private bool passwordsMatch = true;

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private void CheckPasswordMatch()
    {
        passwordsMatch = string.IsNullOrEmpty(confirmPassword) || confirmPassword == registerModel.Password;
    }

    private bool IsFormValid()
    {
        return !string.IsNullOrEmpty(registerModel.Username) &&
               !string.IsNullOrEmpty(registerModel.Email) &&
               !string.IsNullOrEmpty(registerModel.Password) &&
               !string.IsNullOrEmpty(confirmPassword) &&
               passwordsMatch &&
               agreeToTerms &&
               registerModel.Password.Length >= 6;
    }

    private async Task HandleRegister()
    {
        if (!IsFormValid()) return;
        
        isSubmitting = true;
        var success = await AuthService.RegisterAsync(registerModel);
        Message = success ? "Registration Successful! Redirecting to login..." : "Registration Failed. Please try again.";
        
        if (success) 
        {
            await Task.Delay(2000); // Show success message for 2 seconds
            Navigation.NavigateTo("/login");
        }
        
        isSubmitting = false;
    }
}
