@page "/orders/{OrderId}"
@using Web.Services.Orders.DTOs
@using Web.Services.Orders
@inject OrderService OrderService
@inject NavigationManager Navigation
@rendermode InteractiveServer
@attribute [AllowAnonymous]

<header class="topbar">
    <div class="brand">
        <span class="dot"></span>
        <span>Order Details</span>
    </div>
    <div class="topbar-actions">
        <input class="search" placeholder="Search…" />
        <div class="avatar" title="Account"></div>
    </div>
</header>
<div class="content-wrapper">
    <section class="greeting">
        <h1>Order Confirmation</h1>
        <p>Thank you for your purchase!</p>
    </section>
    
    @if (isLoading)
    {
                <div class="loading">
                    <p>Loading order details...</p>
                </div>
            }
            else if (order == null)
            {
                <div class="error-message">
                    <h3>Order not found</h3>
                    <p>The order you're looking for could not be found.</p>
                    <button class="btn btn-primary" @onclick="GoToProducts">
                        Continue Shopping
                    </button>
                </div>
            }
            else
            {
                <div class="order-details-container">
                    <div class="order-header">
                        <div class="order-info">
                            <h2>Order #@OrderId</h2>
                            <div class="order-meta">
                                <span class="order-date">Placed on @order.CreatedAt.ToString("MMMM dd, yyyy 'at' HH:mm")</span>
                                <span class="order-status status-@order.Status.ToLower()">@order.Status</span>
                            </div>
                        </div>
                        <div class="order-actions">
                            <button class="btn btn-secondary" @onclick="GoToProducts">
                                Continue Shopping
                            </button>
                        </div>
                    </div>

                    <div class="order-content">
                        <div class="order-items">
                            <h3>Order Items</h3>
                            @foreach (var item in order.Items)
                            {
                                <div class="order-item">
                                    <div class="item-info">
                                        <h4 class="item-name">@item.ProductName</h4>
                                        <div class="item-details">
                                            <span class="item-price">@item.UnitPrice.ToString("C") @item.Currency</span>
                                            <span class="item-quantity">Quantity: @item.Quantity</span>
                                        </div>
                                    </div>
                                    <div class="item-total">
                                        @((item.UnitPrice * item.Quantity).ToString("C"))
                                    </div>
                                </div>
                            }
                        </div>

                        <div class="order-summary">
                            <div class="summary-card">
                                <h3>Order Summary</h3>
                                
                                <div class="summary-details">
                                    <div class="summary-row">
                                        <span>Customer ID</span>
                                        <span>@order.CustomerId</span>
                                    </div>
                                    <div class="summary-row">
                                        <span>Items (@order.Items.Count)</span>
                                        <span>@order.TotalAmount.ToString("C") @order.Currency</span>
                                    </div>
                                    <div class="summary-row total">
                                        <span>Total Paid</span>
                                        <span>@order.TotalAmount.ToString("C") @order.Currency</span>
                                    </div>
                                </div>

                                <div class="success-message">
                                    <div class="success-icon">✓</div>
                                    <div class="success-text">
                                        <h4>Payment Successful!</h4>
                                        <p>Your order has been confirmed and is being processed.</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

@code {
    [Parameter] public string OrderId { get; set; } = "";
    
    private OrderDto? order;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrder();
    }

    private async Task LoadOrder()
    {
        isLoading = true;
        try
        {
            if (!string.IsNullOrEmpty(OrderId))
            {
                order = await OrderService.GetOrderAsync(OrderId);
                
                // If order doesn't exist from API, show error
                if (order == null)
                {
                    Console.WriteLine($"Order {OrderId} not found");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading order: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void GoToProducts()
    {
        Navigation.NavigateTo("/products");
    }
}
