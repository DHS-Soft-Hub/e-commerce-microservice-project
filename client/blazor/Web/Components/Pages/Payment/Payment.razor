@page "/payment/{orderId}"
@using Web.Services.Orders.DTOs
@using Web.Services.Orders
@using Web.Services.Payment.DTOs
@using Web.Services.Payment
@using Microsoft.AspNetCore.Components.Authorization
@inject OrderService OrderService
@inject PaymentService PaymentService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer
@attribute [AllowAnonymous]

<div class="dashboard-container">
    <aside class="sidebar">
        <NavMenu />
    </aside>
    <main class="main-content">
        <header class="topbar">
            <div class="brand">
                <span class="dot"></span>
                <span>Payment</span>
            </div>
            <div class="topbar-actions">
                <input class="search" placeholder="Searchâ€¦" />
                <div class="avatar" title="Account"></div>
            </div>
        </header>
        <div class="content-wrapper">
            <section class="greeting">
                <h1>Checkout</h1>
                <p>Review your order details</p>
            </section>
            
            @if (isLoading)
            {
                <div class="loading">
                    <p>Loading payment details...</p>
                </div>
            }
            else
            {
                <div class="payment-container">
                    <div class="payment-form">
                        <div class="form-card">
                            <h3>Order Summary</h3>
                            
                            <div class="form-group">
                                <label for="price">Total Amount</label>
                                <div class="price-display">
                                    <span class="amount">@order.TotalAmount.ToString("C")</span>
                                    <span class="currency">@order.Currency</span>
                                </div>
                            </div>

                            <div class="form-group">
                                <label for="paymentMethod">Payment Method</label>
                                <select @bind="selectedPaymentMethod" class="form-control" id="paymentMethod">
                                    <option value="">Select payment method</option>
                                    <option value="CreditCard">Credit Card</option>
                                    <option value="DebitCard">Debit Card</option>
                                    <option value="PayPal">PayPal</option>
                                    <option value="BankTransfer">Bank Transfer</option>
                                </select>
                            </div>

                            <button class="btn btn-success pay-btn" 
                                    @onclick="ProcessPayment"
                                    disabled="@(isProcessing || string.IsNullOrEmpty(selectedPaymentMethod))">
                                @if (isProcessing)
                                {
                                    <span>Processing Payment...</span>
                                }
                                else
                                {
                                    <span>Pay @order.TotalAmount.ToString("C")</span>
                                }
                            </button>
                        </div>
                    </div>

                    <div class="order-summary">
                        <div class="summary-card">
                            <h3>Order Details</h3>
                            <div class="order-info">
                                <p><strong>Order ID:</strong> @order.Id</p>
                                <p><strong>Status:</strong> @order.Status</p>
                                <p><strong>Created:</strong> @order.CreatedAt.ToString("MMM dd, yyyy")</p>
                            </div>
                            
                            <h4>Items</h4>
                            @foreach (var item in order.Items)
                            {
                                <div class="summary-item">
                                    <div class="item-details">
                                        <span class="item-name">@item.ProductName</span>
                                        <span class="item-qty">Qty: @item.Quantity</span>
                                    </div>
                                    <span class="item-price">@((item.UnitPrice * item.Quantity).ToString("C"))</span>
                                </div>
                            }
                            <div class="summary-total">
                                <span>Total: @order.TotalAmount.ToString("C") @order.Currency</span>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </main>
</div>

@code {
    [Parameter] public string OrderId { get; set; } = string.Empty;
    
    private OrderDto order = new();
    private string selectedPaymentMethod = "";
    private bool isLoading = true;
    private bool isProcessing = false;
    private string userId = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Get user info from authentication state
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            userId = authState.User.FindFirst("sub")?.Value ?? string.Empty;
        }
        
        await LoadOrder();
    }

    private async Task LoadOrder()
    {
        isLoading = true;
        try
        {
            if (string.IsNullOrEmpty(OrderId))
            {
                Navigation.NavigateTo("/cart");
                return;
            }

            order = await OrderService.GetOrderAsync(OrderId) ?? new OrderDto();
            if (string.IsNullOrEmpty(order.Id))
            {
                await JSRuntime.InvokeVoidAsync("alert", "Order not found");
                Navigation.NavigateTo("/cart");
                return;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading order: {ex.Message}");
            Navigation.NavigateTo("/cart");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ProcessPayment()
    {
        isProcessing = true;
        try
        {
            if (!Enum.TryParse<PaymentMethod>(selectedPaymentMethod, out var paymentMethod))
            {
                await JSRuntime.InvokeVoidAsync("alert", "Invalid payment method selected");
                return;
            }

            var payment = await PaymentService.ProcessPaymentAsync(
                OrderId, 
                paymentMethod, 
                order.TotalAmount, 
                order.Currency
            );

            if (payment != null)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Payment processed successfully!");
                Navigation.NavigateTo($"/orders/{OrderId}");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Payment processing failed. Please try again.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Payment processing failed: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
        }
    }
}
