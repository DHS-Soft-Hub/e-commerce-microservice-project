@page "/payment/{orderId}"
@using Web.Services.Orders.DTOs
@using Web.Services.Orders
@using Web.Services.Payment.DTOs
@using Web.Services.Payment
@using Web.Services.Shared
@inject OrderService OrderService
@inject PaymentService PaymentService
@inject UserContextService UserContextService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
@attribute [AllowAnonymous]

<style>
    .progress-bar {
        width: 100%;
        height: 8px;
        background-color: #f0f0f0;
        border-radius: 4px;
        margin-top: 10px;
        overflow: hidden;
    }
    
    .progress-fill {
        height: 100%;
        background-color: #007bff;
        border-radius: 4px;
        transition: width 0.3s ease;
    }
    
    .loading {
        text-align: center;
        padding: 40px;
    }
    
    .loading p {
        margin-bottom: 10px;
    }
    
    .loading small {
        color: #666;
    }
</style>

<header class="topbar">
    <div class="brand">
        <span class="dot"></span>
        <span>Payment</span>
    </div>
    <div class="topbar-actions">
        <input class="search" placeholder="Search…" />
        <div class="avatar" title="Account"></div>
    </div>
</header>
        <div class="content-wrapper">
            <section class="greeting">
                <h1>Checkout</h1>
                <p>Review your order details</p>
            </section>
            
            @if (isLoading)
            {
                <div class="loading">
                    <p>@loadingMessage</p>
                    @if (retryAttempt > 0)
                    {
                        <p><small>Waiting for saga to process order... (Attempt @retryAttempt/@MaxRetryAttempts)</small></p>
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: @((retryAttempt * 100) / MaxRetryAttempts)%"></div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="payment-container">
                    <div class="payment-form">
                        <div class="form-card">
                            <h3>Payment Details</h3>
                            
                            @if (payment != null)
                            {
                                <div class="payment-status">
                                    <p><strong>Payment Status:</strong> 
                                        <span class="status-@payment.Status.ToLower()">@payment.Status</span>
                                    </p>
                                    <p><strong>Payment ID:</strong> @payment.Id</p>
                                    @if (!string.IsNullOrEmpty(payment.TransactionId))
                                    {
                                        <p><strong>Transaction ID:</strong> @payment.TransactionId</p>
                                    }
                                </div>
                            }
                            
                            <div class="form-group">
                                <label for="price">Total Amount</label>
                                <div class="price-display">
                                    <span class="amount">@order.TotalAmount.ToString("C")</span>
                                    <span class="currency">@order.Currency</span>
                                </div>
                            </div>

                            <div class="form-group">
                                <label for="paymentMethod">Payment Method</label>
                                <select @bind="selectedPaymentMethod" class="form-control" id="paymentMethod">
                                    <option value="">Select payment method</option>
                                    <option value="CreditCard">Credit Card</option>
                                    <option value="DebitCard">Debit Card</option>
                                    <option value="PayPal">PayPal</option>
                                    <option value="BankTransfer">Bank Transfer</option>
                                </select>
                            </div>

                            @if (payment?.Status == "Pending")
                            {
                                <button class="btn btn-success pay-btn" 
                                        @onclick="ProcessPayment"
                                        disabled="@(isProcessing || string.IsNullOrEmpty(selectedPaymentMethod))">
                                    @if (isProcessing)
                                    {
                                        <span>Approving Payment...</span>
                                    }
                                    else
                                    {
                                        <span>Approve Payment @order.TotalAmount.ToString("C")</span>
                                    }
                                </button>
                            }
                            else if (payment?.Status == "Completed")
                            {
                                <div class="payment-completed">
                                    <p class="success-message">✅ Payment has been completed!</p>
                                    <button class="btn btn-primary" @onclick="@(() => Navigation.NavigateTo($"/orders/{OrderId}"))">
                                        View Order Details
                                    </button>
                                </div>
                            }
                            else
                            {
                                <div class="payment-error">
                                    <p class="error-message">⚠️ Payment status: @(payment?.Status ?? "Unknown")</p>
                                    <p>Please contact support if you need assistance.</p>
                                </div>
                            }
                        </div>
                    </div>

                    <div class="order-summary">
                        <div class="summary-card">
                            <h3>Order Details</h3>
                            <div class="order-info">
                                <p><strong>Order ID:</strong> @order.Id</p>
                                <p><strong>Status:</strong> @order.Status</p>
                                <p><strong>Created:</strong> @order.CreatedAt.ToString("MMM dd, yyyy")</p>
                            </div>
                            
                            <h4>Items</h4>
                            @foreach (var item in order.Items)
                            {
                                <div class="summary-item">
                                    <div class="item-details">
                                        <span class="item-name">@item.ProductName</span>
                                        <span class="item-qty">Qty: @item.Quantity</span>
                                    </div>
                                    <span class="item-price">@((item.UnitPrice * item.Quantity).ToString("C"))</span>
                                </div>
                            }
                            <div class="summary-total">
                                <span>Total: @order.TotalAmount.ToString("C") @order.Currency</span>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

@code {
    [Parameter] public string OrderId { get; set; } = string.Empty;
    
    private OrderDto order = new();
    private PaymentDto? payment = null;
    private string selectedPaymentMethod = "";
    private bool isLoading = true;
    private bool isProcessing = false;
    private string userId = string.Empty;
    private int retryAttempt = 0;
    private const int MaxRetryAttempts = 10;
    private string loadingMessage = "Loading payment details...";
    private bool hasRendered = false;
    private string? pendingAlertMessage = null;
    private string? pendingRedirectUrl = null;

    protected override async Task OnInitializedAsync()
    {
        // Get user context from UserContextService
        var userContext = await UserContextService.GetUserContextAsync();
        userId = userContext.UserId;
        
        await LoadOrderAndPayment();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            hasRendered = true;
            
            // Process any pending alerts or redirects
            if (!string.IsNullOrEmpty(pendingAlertMessage))
            {
                await JSRuntime.InvokeVoidAsync("alert", pendingAlertMessage);
                pendingAlertMessage = null;
            }
            
            if (!string.IsNullOrEmpty(pendingRedirectUrl))
            {
                Navigation.NavigateTo(pendingRedirectUrl);
                pendingRedirectUrl = null;
            }
        }
    }

    private async Task ShowAlertAsync(string message)
    {
        if (hasRendered)
        {
            await JSRuntime.InvokeVoidAsync("alert", message);
        }
        else
        {
            pendingAlertMessage = message;
        }
    }

    private void NavigateToUrl(string url)
    {
        if (hasRendered)
        {
            Navigation.NavigateTo(url);
        }
        else
        {
            pendingRedirectUrl = url;
        }
    }

    private async Task LoadOrderAndPayment()
    {
        isLoading = true;
        retryAttempt = 0;
        loadingMessage = "Loading order details...";
        
        try
        {
            if (string.IsNullOrEmpty(OrderId))
            {
                Navigation.NavigateTo("/cart");
                return;
            }

            // Load order details first
            order = await OrderService.GetOrderAsync(OrderId) ?? new OrderDto();
            if (string.IsNullOrEmpty(order.Id))
            {
                await ShowAlertAsync("Order not found");
                NavigateToUrl("/cart");
                return;
            }

            // Wait for payment to be created by saga with retry logic
            payment = await WaitForPaymentWithRetry(OrderId);
            
            if (payment != null)
            {
                // If payment already completed, redirect to order details
                if (payment.Status == "Completed")
                {
                    await ShowAlertAsync("Payment has already been completed for this order.");
                    NavigateToUrl($"/orders/{OrderId}");
                    return;
                }
                
                // Pre-select the payment method if it exists
                selectedPaymentMethod = payment.PaymentMethod;
            }
            else
            {
                await ShowAlertAsync("Payment could not be found for this order after waiting. The saga may still be processing. Please try again in a moment or contact support.");
                NavigateToUrl("/cart");
                return;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading order and payment: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading payment details: {ex.Message}");
            Navigation.NavigateTo("/cart");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task<PaymentDto?> WaitForPaymentWithRetry(string orderId)
    {
        for (retryAttempt = 1; retryAttempt <= MaxRetryAttempts; retryAttempt++)
        {
            loadingMessage = $"Looking for payment... (Attempt {retryAttempt}/{MaxRetryAttempts})";
            StateHasChanged(); // Update UI to show progress
            
            try
            {
                var payment = await PaymentService.GetPaymentByOrderIdAsync(orderId);
                if (payment != null)
                {
                    loadingMessage = "Payment found!";
                    return payment;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error checking for payment (attempt {retryAttempt}): {ex.Message}");
            }

            if (retryAttempt < MaxRetryAttempts)
            {
                // Exponential backoff: 1s, 2s, 4s, 8s, etc. (max 30s)
                var delaySeconds = Math.Min(Math.Pow(2, retryAttempt - 1), 30);
                loadingMessage = $"Waiting {delaySeconds}s before retry...";
                StateHasChanged();
                
                await Task.Delay(TimeSpan.FromSeconds(delaySeconds));
            }
        }

        return null; // Payment not found after all retries
    }

    private async Task ProcessPayment()
    {
        isProcessing = true;
        try
        {
            if (payment == null)
            {
                await ShowAlertAsync("No payment found for this order");
                return;
            }

            if (!Enum.TryParse<PaymentMethod>(selectedPaymentMethod, out var paymentMethod))
            {
                await ShowAlertAsync("Invalid payment method selected");
                return;
            }

            // Update the existing payment to Completed status
            var updateInput = new UpdatePaymentInput
            {
                Id = payment.Id,
                OrderId = payment.OrderId,
                TransactionId = payment.TransactionId, // Keep the existing transaction ID
                PaymentMethod = selectedPaymentMethod,
                Amount = order.TotalAmount,
                Currency = order.Currency,
                Status = "Completed" // This will trigger the PaymentProcessedIntegrationEvent
            };

            var updatedPayment = await PaymentService.UpdatePaymentAsync(updateInput);

            if (updatedPayment != null)
            {
                await ShowAlertAsync("Payment approved successfully! Your order will now be processed.");
                Navigation.NavigateTo($"/orders/{OrderId}");
            }
            else
            {
                await ShowAlertAsync("Payment approval failed. Please try again.");
            }
        }
        catch (Exception ex)
        {
            await ShowAlertAsync($"Payment processing failed: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
        }
    }
}
