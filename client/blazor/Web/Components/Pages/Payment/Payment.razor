@page "/payment/{orderId}"
@using Web.Services.Orders.DTOs
@using Web.Services.Orders
@using Web.Services.Payment.DTOs
@using Web.Services.Payment
@using Microsoft.AspNetCore.Components.Authorization
@inject OrderService OrderService
@inject PaymentService PaymentService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer
@attribute [AllowAnonymous]

<div class="dashboard-container">
    <aside class="sidebar">
        <NavMenu />
    </aside>
    <main class="main-content">
        <header class="topbar">
            <div class="brand">
                <span class="dot"></span>
                <span>Payment</span>
            </div>
            <div class="topbar-actions">
                <input class="search" placeholder="Search…" />
                <div class="avatar" title="Account"></div>
            </div>
        </header>
        <div class="content-wrapper">
            <section class="greeting">
                <h1>Checkout</h1>
                <p>Review your order details</p>
            </section>
            
            @if (isLoading)
            {
                <div class="loading">
                    <p>Loading payment details...</p>
                </div>
            }
            else
            {
                <div class="payment-container">
                    <div class="payment-form">
                        <div class="form-card">
                            <h3>Payment Details</h3>
                            
                            @if (payment != null)
                            {
                                <div class="payment-status">
                                    <p><strong>Payment Status:</strong> 
                                        <span class="status-@payment.Status.ToLower()">@payment.Status</span>
                                    </p>
                                    <p><strong>Payment ID:</strong> @payment.Id</p>
                                    @if (!string.IsNullOrEmpty(payment.TransactionId))
                                    {
                                        <p><strong>Transaction ID:</strong> @payment.TransactionId</p>
                                    }
                                </div>
                            }
                            
                            <div class="form-group">
                                <label for="price">Total Amount</label>
                                <div class="price-display">
                                    <span class="amount">@order.TotalAmount.ToString("C")</span>
                                    <span class="currency">@order.Currency</span>
                                </div>
                            </div>

                            <div class="form-group">
                                <label for="paymentMethod">Payment Method</label>
                                <select @bind="selectedPaymentMethod" class="form-control" id="paymentMethod">
                                    <option value="">Select payment method</option>
                                    <option value="CreditCard">Credit Card</option>
                                    <option value="DebitCard">Debit Card</option>
                                    <option value="PayPal">PayPal</option>
                                    <option value="BankTransfer">Bank Transfer</option>
                                </select>
                            </div>

                            @if (payment?.Status == "Pending")
                            {
                                <button class="btn btn-success pay-btn" 
                                        @onclick="ProcessPayment"
                                        disabled="@(isProcessing || string.IsNullOrEmpty(selectedPaymentMethod))">
                                    @if (isProcessing)
                                    {
                                        <span>Approving Payment...</span>
                                    }
                                    else
                                    {
                                        <span>Approve Payment @order.TotalAmount.ToString("C")</span>
                                    }
                                </button>
                            }
                            else if (payment?.Status == "Completed")
                            {
                                <div class="payment-completed">
                                    <p class="success-message">✅ Payment has been completed!</p>
                                    <button class="btn btn-primary" @onclick="@(() => Navigation.NavigateTo($"/orders/{OrderId}"))">
                                        View Order Details
                                    </button>
                                </div>
                            }
                            else
                            {
                                <div class="payment-error">
                                    <p class="error-message">⚠️ Payment status: @(payment?.Status ?? "Unknown")</p>
                                    <p>Please contact support if you need assistance.</p>
                                </div>
                            }
                        </div>
                    </div>

                    <div class="order-summary">
                        <div class="summary-card">
                            <h3>Order Details</h3>
                            <div class="order-info">
                                <p><strong>Order ID:</strong> @order.Id</p>
                                <p><strong>Status:</strong> @order.Status</p>
                                <p><strong>Created:</strong> @order.CreatedAt.ToString("MMM dd, yyyy")</p>
                            </div>
                            
                            <h4>Items</h4>
                            @foreach (var item in order.Items)
                            {
                                <div class="summary-item">
                                    <div class="item-details">
                                        <span class="item-name">@item.ProductName</span>
                                        <span class="item-qty">Qty: @item.Quantity</span>
                                    </div>
                                    <span class="item-price">@((item.UnitPrice * item.Quantity).ToString("C"))</span>
                                </div>
                            }
                            <div class="summary-total">
                                <span>Total: @order.TotalAmount.ToString("C") @order.Currency</span>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </main>
</div>

@code {
    [Parameter] public string OrderId { get; set; } = string.Empty;
    
    private OrderDto order = new();
    private PaymentDto? payment = null;
    private string selectedPaymentMethod = "";
    private bool isLoading = true;
    private bool isProcessing = false;
    private string userId = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Get user info from authentication state
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            userId = authState.User.FindFirst("sub")?.Value ?? string.Empty;
        }
        
        await LoadOrderAndPayment();
    }

    private async Task LoadOrderAndPayment()
    {
        isLoading = true;
        try
        {
            if (string.IsNullOrEmpty(OrderId))
            {
                Navigation.NavigateTo("/cart");
                return;
            }

            // Load order details
            order = await OrderService.GetOrderAsync(OrderId) ?? new OrderDto();
            if (string.IsNullOrEmpty(order.Id))
            {
                await JSRuntime.InvokeVoidAsync("alert", "Order not found");
                Navigation.NavigateTo("/cart");
                return;
            }

            // Load existing payment for this order
            payment = await PaymentService.GetPaymentByOrderIdAsync(OrderId);
            
            if (payment != null)
            {
                // If payment already completed, redirect to order details
                if (payment.Status == "Completed")
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Payment has already been completed for this order.");
                    Navigation.NavigateTo($"/orders/{OrderId}");
                    return;
                }
                
                // Pre-select the payment method if it exists
                selectedPaymentMethod = payment.PaymentMethod;
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "No payment found for this order. Please contact support.");
                Navigation.NavigateTo("/cart");
                return;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading order and payment: {ex.Message}");
            Navigation.NavigateTo("/cart");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ProcessPayment()
    {
        isProcessing = true;
        try
        {
            if (payment == null)
            {
                await JSRuntime.InvokeVoidAsync("alert", "No payment found for this order");
                return;
            }

            if (!Enum.TryParse<PaymentMethod>(selectedPaymentMethod, out var paymentMethod))
            {
                await JSRuntime.InvokeVoidAsync("alert", "Invalid payment method selected");
                return;
            }

            // Update the existing payment to Completed status
            var updateInput = new UpdatePaymentInput
            {
                Id = payment.Id,
                OrderId = payment.OrderId,
                TransactionId = payment.TransactionId, // Keep the existing transaction ID
                PaymentMethod = selectedPaymentMethod,
                Amount = order.TotalAmount,
                Currency = order.Currency,
                Status = "Completed" // This will trigger the PaymentProcessedIntegrationEvent
            };

            var updatedPayment = await PaymentService.UpdatePaymentAsync(updateInput);

            if (updatedPayment != null)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Payment approved successfully! Your order will now be processed.");
                Navigation.NavigateTo($"/orders/{OrderId}");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Payment approval failed. Please try again.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Payment processing failed: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
        }
    }
}
