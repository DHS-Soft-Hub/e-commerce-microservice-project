services:
  orderservice:
    container_name: orderservice
    build:
      context: ../  # IMPORTANT: points to /services so shared folders are visible
      dockerfile: docker/Dockerfile.orders
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__postgresdb=Host=ordersdb;Database=ordersdb;Username=postgres;Password=order@123
      - ConnectionStrings__RabbitMQ=amqp://guest:guest@rabbitmq:5672/
      - Jwt__Issuer=http://orderservice
      - Jwt__Audience=api-clients
      - Jwt__Key=12382198398#*@&*$*#$&#*$#$AKSJDLKSADDAKDOPADI&^&^%$#@!@#$
    ports:
      - "5002:8080"
    networks:
      - backend
    depends_on:
      ordersdb:
        condition: service_healthy
      rabbitmq:
        condition: service_started

  ordersdb:
      container_name: ordersdb
      image: postgres:latest
      environment:
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: order@123
        POSTGRES_DB: ordersdb
      ports:
        - "5433:5432"
      volumes:
        - orders-pgdata:/var/lib/postgresql/data
      networks:
        - backend
      healthcheck:
        test: ["CMD-SHELL", "pg_isready -U postgres"]
        interval: 10s 
        timeout: 30s
        retries: 5
        start_period: 30s

volumes:
  orders-pgdata:

networks:
  backend:
    driver: bridge